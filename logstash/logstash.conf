input {
  beats {
    port => 5044
  }
}

filter {
  # Фильтр для Metricbeat
  if [agent][type] == "metricbeat" {
    if [metricset][name] == "cpu" {
      ruby {
        code => '
          if event.get("[system][cpu][total][pct]")
            event.set("[system][cpu][total][pct]", event.get("[system][cpu][total][pct]") * 100)
          end
        '
      }
    }

    if [metricset][name] == "memory" {
      ruby {
        code => '
          if event.get("[system][memory][used][bytes]")
            event.set("[system][memory][used][gb]", event.get("[system][memory][used][bytes]") / (1024 ** 3))
          end
          if event.get("[system][memory][total][bytes]")
            event.set("[system][memory][total][gb]", event.get("[system][memory][total][bytes]") / (1024 ** 3))
          end
        '
      }
    }

    if [metricset][name] == "network" {
      ruby {
        code => '
          if event.get("[system][network][in][bytes]")
            event.set("[system][network][in][mb]", event.get("[system][network][in][bytes]") / (1024 ** 2))
          end
          if event.get("[system][network][out][bytes]")
            event.set("[system][network][out][mb]", event.get("[system][network][out][bytes]") / (1024 ** 2))
          end
        '
      }
    }

    if [event][module] == "nginx" {
      if [nginx][stubstatus][accepts] and [nginx][stubstatus][handled] {
        ruby {
          code => '
            accepts = event.get("[nginx][stubstatus][accepts]").to_f
            handled = event.get("[nginx][stubstatus][handled]").to_f
            if accepts > 0
              error_rate = ((accepts - handled) / accepts) * 100
              event.set("[nginx][stubstatus][error_rate]", error_rate.round(2))
            end
          '
        }
      }
    }
  }

  # Фильтры для Heartbeat
  if [agent][type] == "heartbeat" {
    if [monitor][type] == "http" {
      mutate {
        add_tag => ["http_monitor"]
      }
    
      grok {
        match => {
          "message" => "%{TIMESTAMP_ISO8601:timestamp} %{WORD:status} %{NUMBER:duration} %{URIPROTO:protocol}://%{URIHOST:host}"
        }
      }
    
      if [http][response][time] {
        mutate {
          convert => {
            "[http][response][time]" => "float"
          }
          add_field => {
            "response_time_ms" => "%{[http][response][time]}"
          }
        }
        ruby {
          code => '
            if event.get("response_time_ms")
              event.set("response_time_ms", event.get("response_time_ms") * 1000)
            end
          '
        }
      }
    }

    if [monitor][type] == "tcp" {
      mutate {
        add_tag => ["tcp_monitor"]
      }
    
      grok {
        match => {
          "message" => "%{TIMESTAMP_ISO8601:timestamp} %{WORD:status} %{NUMBER:duration} %{WORD:host}"
        }
      }
    
      if [tcp][rtt][connect][us] {
        ruby {
          code => '
            if event.get("[tcp][rtt][connect][us]").to_i > 0
              event.set("connection_status", "success")
            else
              event.set("connection_status", "failed")
            end
          '
        }
      }
    }
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "%{[@metadata][beat]}-%{+YYYY.MM.dd}"
  }
}
